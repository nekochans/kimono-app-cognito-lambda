service: kimono-app-cognito-lambda

frameworkVersion: '>=2.0.0 <3.0.0'

plugins:
  - serverless-prune-plugin

provider:
  name: aws
  runtime: go1.x
  stage: ${env:DEPLOY_STAGE}
  region: ap-northeast-1
  profile: ${self:custom.profiles.${self:provider.stage}}
  logRetentionInDays: 3
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"
  environment:
    DEPLOY_STAGE: ${env:DEPLOY_STAGE}
    TARGET_USER_POOL_ID: ${env:TARGET_USER_POOL_ID}
    KIMONO_APP_FRONTEND_URL: ${env:KIMONO_APP_FRONTEND_URL}

custom:
  defaultStage: local
  profiles:
    prod: kimono-app-prod
    stg: kimono-app-stg
    local: kimono-app-stg
  prune:
    automatic: true
    number: 3

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  custom-message:
    handler: bin/custom-message
    events:
      - cognitoUserPool:
          pool: ${env:TRIGGER_USER_POOL_NAME}
          trigger: CustomMessage
          existing: true

resources:
  Resources:
    OnCognitoSignupPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName:
          Fn::GetAtt: [ "CustomDashmessageLambdaFunction", "Arn"]
        Principal: "cognito-idp.amazonaws.com"
        SourceArn:
          Fn::Join: [ "", [ "arn:aws:cognito-idp", ":", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", "userpool/", "${env:TARGET_USER_POOL_ID}" ] ]
